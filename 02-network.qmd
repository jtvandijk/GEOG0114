# Accessibility Analysis
Accessibility is often described as the ease with which individuals can reach places and opportunities, such as employment, public services, and cultural activities. We can utilise transport network data to quantify accessibility and characterise areas based on their accessibility levels. This week, we will use the `dodgr` R library to measure accessibility between different points of interest by calculating the network distances between them.

## Lecture slides {#lecture-w08}
You can download the slides of this week's lecture here: [[Link]]({{< var slides.week08 >}}).

## Reading list {#reading-w08}
#### Essential readings 
- Geurs, K., Van Wee, B. 2004. Accessibility evaluation of land-use and transport strategies: review and research directions. *Journal of Transport Geography* 12(2): 127-140. [[Link]](https://doi.org/10.1016/j.jtrangeo.2003.10.005)
- Higgins, C., Palm, M. DeJohn, A. *et al.* 2022. Calculating place-based transit accessibility: Methods, tools and algorithmic dependence. *Journal of Transport and Land Use* 15(1): 95-116. [[Link]](https://doi.org/10.5198/jtlu.2022.2012)

#### Suggested readings
- Van Dijk, J., Krygsman, S. and De Jong, T. 2015. Toward spatial justice: The spatial equity effects of a toll road in Cape Town, South Africa. *Journal of Transport and Land Use* 8(3): 95-114. [[Link]](https://doi.org/10.5198/jtlu.2015.555)
- Van Dijk, J. and De Jong, T. 2017. Post-processing GPS-tracks in reconstructing travelled routes in a GIS-environment: network subset selection and attribute adjustment. *Annals of GIS* 23(3): 203-217. [[Link]](https://doi.org/10.1080/19475683.2017.1340340)

## Accessibility in Lambeth
This week, we will analyse the accessibility of fast-food outlets in the London Borough of Lambeth. Specifically, we will examine how closely these outlets are located within walking distance of primary and secondary schools, and explore any potential relationships between their proximity and the relative levels of deprivation in the area.

We will extract the points of interest that we will use for this analysis from the [Point of Interest (POI) data for the United Kingdom](https://journals.sagepub.com/doi/10.1177/23998083241263124), obtained from the [Overture Maps Foundation](https://overturemaps.org/) and pre-processed by the [Consumer Data Research Centre](https://data.cdrc.ac.uk/dataset/point-interest-data-united-kingdom#data-and-resources) to provide users with easy access.

You can download a subset of the POI dataset via the link provided below. A copy of the 2011 London LSOAs spatial boundaries, the boundaries of the London Boroughs, and the 2019 English [Index of Multiple Deprivation](https://www.gov.uk/government/statistics/english-indices-of-deprivation-2019). Save these files in your project folder under `data`.

| File                                        | Type   | Link |
| :------                                     | :------| :------ |
| Lambeth Overture Points of Interest 2024    | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0114/raw/master/data/Lambeth-POI-2024.gpkg) |
| London LSOA 2011 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0114/raw/master/data/London-LSOA-2011.gpkg) |
| London Borough Spatial Boundaries             | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0114/raw/master/data/London-Boroughs.gpkg) |
| England 2019 Index of Multiple Deprivation  | `csv` | [Download](https://github.com/jtvandijk/GEOG0114/tree/master/data/England-IMD-2019.csv) |

::: {.callout-tip}
To download a `csv` file that is hosted on GitHub, click on the `Download raw file` button on the top right of your screen and it should download directly to your computer.
:::

::: {.callout-note}
To extract the Lambeth Overture Points of Interest data, a 2-kilometre buffer was applied around the boundaries of Lambeth. This approach ensures that points just outside the study area are included, as locations beyond the borough boundary may still be accessible to residents and could represent the nearest available options.
:::

Open a new script and save this as `w08-accessibility.r`. 

We will start by loading the libraries that we will need:

```{r}
#| label: 08-options
#| echo: False
#| eval: True
#| output: False
# max print
options(max.print = 50)
```

```{r}
#| label: 08-load-libraries
#| classes: styled-output
#| echo: True
#| eval: True
#| output: False
#| tidy: True
#| filename: "R code"
# load libraries
library(tidyverse)
library(sf)
library(tmap)
library(osmdata)
library(dodgr)
```

::: {.callout-warning}
You may have to install some of these libraries if you have not used these before.
:::

Next, we can load the spatial data into R.

```{r}
#| label: 08-load-data
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"
# read poi data
poi24 <- st_read('data/Lambeth-POI-2024.gpkg')

# read lsoa dataset
lsoa11 <- st_read('data/London-LSOA-2011.gpkg')

# read borough dataset
borough <- st_read('data/London-Boroughs.gpkg')
```

Now, carefully examine each individual dataframe to understand how the data is structured and what information it contains.

```{r}
#| label: 08-inspect-data
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"
# inspect poi data
head(poi24)

# inspect lsoa dataset
head(lsoa11)

# inspect borough dataset
head(borough)
```

### Point of Interest data
The inspection shows that the POI dataset contains a wide variety of location types, with each point tagged under a main and alternative category, as provided by the Overture Maps Foundation via Meta and Microsoft. However, these tags may not be consistent across the dataset, so we will need to identify specific keywords to filter the `main_category` and `alternate_category` columns. 

We will start by filtering out all POIs where the word `school` features in the `main_category` column:

```{r}
#| label: 08-school-data
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"
# filter school poi data
poi_schools <- poi24 |>
  filter(str_detect(main_category, 'school'))

# inspect
head(unique(poi_schools$main_category), n = 50)
```

::: {.callout-tip}
You can further inspect the results using the `View()` function. 
:::

This is still a very large list, and looking at the categories not all POIs containing the string `school` should be included. However, this initial selection has given us a more manageable list from which we can choose the relevant tags. We can now further filter the dataset as well as clip the dataset to the administrative boundaries of Lambeth.

```{r}
#| label: 08-school-data-filter1
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| warning: False
#| filename: "R code"

# remove quotes for easier processing
poi_schools <- poi_schools |>
  mutate(main_category = str_replace_all(main_category, '\"',''))

# filter school poi data
poi_schools <- poi_schools |>
  filter(main_category == 'elementary_school' |
         main_category == 'high_school' |
         main_category == 'middle_school' |
         main_category == 'private_school' |
         main_category == 'public_school' |
         main_category == 'school')

# filter school poi data 
lambeth <- borough |>
  filter(name == 'Lambeth')

poi_schools <- poi_schools |>
  st_intersection(lambeth) |>
  select(1:11)

# inspect
poi_schools
```

This is still a rather long list and likely inaccurate. According to [Lambeth Council Education Statistics](https://www.lambeth.gov.uk/sites/default/files/2024-07/Education_Statistics_2023-24.pdf), there should be 80 primary and secondary schools across the borough. We can use the `alternate_category` column to further narrow down our results.

::: {.callout-tip}
You can inspect the different tags and their frequencies easily by creating a frequency table: `table(poi_schools$alternate_category)`.
:::

```{r}
#| label: 08-school-data-filter2
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# filter school poi data 
poi_schools <- poi_schools |>
  filter(str_detect(alternate_category, 'elementary_school') |
         str_detect(alternate_category, 'high_school') |
         str_detect(alternate_category, 'middle_school') |
         str_detect(alternate_category, 'private_school') |
         str_detect(alternate_category, 'public_school'))

# inspect
poi_schools
```

Since the POI dataset is compiled from various open sources, the data quality is not guaranteed. Some schools may be missing, while others could be duplicated, perhaps under slightly different names or because different buildings have been assigned separate point locations. However, it is unlikely that more than one school would share the same postcode. Therefore, we will use postcode information (where available) to finalise our school selection and remove any likely duplicates.

```{r}
#| label: 08-school-data-filter3
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# identify duplicate postcodes
poi_schools <- poi_schools |>
  group_by(postcode) |>
  mutate(rank = rank(primary_name)) |>
  ungroup()

# filter school poi data 
poi_schools <- poi_schools |>
  filter(is.na(postcode) | rank == 1) |>
  select(-rank)

# inspect
poi_schools
```

Although we now have fewer schools than we had expected, either due to overly restrictive filtering of tags or because some school locations are not recorded in the dataset, we will proceed with the current data.

::: {.callout-warning}
Variable preparation can be a time-consuming process that often necessitates a more extensive exploratory analysis to ensure sufficient data quality. This may involve sourcing additional data to supplement your existing dataset.
:::

We can use a similar approach to approximate the locations of fast food outlets in the Borough.

```{r}
#| label: 08-fastfood-data
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"
# filter fast food poi data
poi_fastfood <- poi24 |>
  filter(str_detect(main_category, 'fast_food_restaurant') |
         str_detect(alternate_category, 'fast_food_restaurant') |
         str_detect(alternate_category, 'chicken_restaurant') |
         str_detect(alternate_category, 'burger_restaurant'))

# inspect
poi_fastfood
```

Let's map both datasets to get an idea of how the data look like:

```{r tidy='styler'} 
#| label: fig-08-poi-map
#| fig-cap: Extracted school and fast food locations for Lambeth.
#| classes: styled-output
#| echo: True
#| eval: True
#| filename: "R code"
# combine for mapping
poi_schools <- poi_schools |>
  mutate(type = 'School')
poi_fastfood <- poi_fastfood |>
  mutate(type = 'Fast food')
poi_lambeth <- rbind(poi_schools, poi_fastfood)

# shape, polygon
tm_shape(lambeth) +
  
  # specify column, classes
  tm_polygons(
    col = '#f0f0f0', 
  ) +
  
# shape, points
tm_shape(poi_lambeth) + 
  
  # specify column, colours
  tm_dots(
    col = 'type',
    size = 0.05,
    palette = c('#beaed4','#fdc086'),
    title = ''
  ) +
  
  # set layout
  tm_layout(
    legend.outside = TRUE,
    legend.position = c('right', 'bottom'),
    frame = FALSE
  )
```

### Network data
In addition to the locations of interest, we need network data to assess the accessibility of schools in relation to fast food outlets. We will use [OpenStreetMap](https://www.openstreetmap.org/#map=6/54.91/-3.43) to extract road segment data. Similar to the POI dataset, OSM uses `key` and `value` tags to categorise the features within its dataset.

::: {.callout-note}
OpenStreetMap (OSM) is a free, editable map of the world, but its coverage is uneven globally. However, the accuracy and quality of the data can at times be questionable, with details such as road types and speed limits missing. The [OpenStreetMap Wiki](https://wiki.openstreetmap.org/wiki/Tags) provides more details on the tagging system.
:::

To download the Lambeth road network dataset, we first need to define our bounding box coordinates. We will then use these coordinates in our OSM query to extract specific types of road segments within the defined search area. Our focus will be on selecting all OSM features with the `highway` tag that are likely to be used by pedestrians (e.g. excluding `motorways`).

```{r} 
#| label: 08-network-data
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| warning: False
#| filename: "R code"

# define our bbox coordinates, use WGS84
bbox_lambeth <- poi24 |>
  st_transform(4326) |>
  st_bbox()
  
# osm query
osm_network <- opq(bbox = bbox_lambeth ) |>
  add_osm_feature(
    key = 'highway', 
    value = c('primary', 'secondary', 'tertiary', 'residential', 'path', 'footway', 'unclassified', 'living_street', 'pedestrian')) |> 
  osmdata_sf()
```

::: {.callout-warning}
In some cases, the OSM query may return an error, particularly when multiple users from the same location are executing the exact same query. If so, you can download a prepared copy of the data here: [[Download]](https://github.com/jtvandijk/GEOG0114/raw/master/data/London-OSM-Roads.RData). 

You can load this copy into R through `load('data/London-OSM-Roads.RData')`
:::

The returned `osm_network` object contains a variety of elements with the specified tags. Our next step is to extract the spatial data from this object to create our road network dataset. Specifically, we will extract the edges of the network, which represent the lines of the roads, as well as the nodes, which represent the points where the roads start, end, or intersect.

```{r}
#| label: 08-network-data-load
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# extract the nodes, with their osm_id
osm_network_nodes <- osm_network$osm_points[, "osm_id"]

# extract the edges, with their osm_id and relevant columns
osm_network_edges <- osm_network$osm_lines[, c("osm_id", "name", "highway", "maxspeed", "oneway")]

# inspect
head(osm_network_nodes)

# inspect
head(osm_network_edges)
```

We can quickly map the network edges to see how the road network looks like:

```{r tidy='styler'} 
#| label: fig-08-netx-map
#| fig-cap: Extracted OpenStreetMap road network data for Lambeth.
#| classes: styled-output
#| echo: True
#| eval: True
#| filename: "R code"
# shape, polygon
tm_shape(osm_network_edges) +
  
  # specify column, classes
  tm_lines(
    col = '#bdbdbd', 
    lwd = 0.2,
  ) +
  
  # shape, polygon
  tm_shape(lambeth) +
  
  # specify column, classes
  tm_borders(
    col = '#252525', 
    lwd = 2
  ) +
  
  # set legend
  tm_add_legend(
    type = 'line', 
    labels = 'Road segments', 
    col = '#bdbdbd'
  ) +
  
  tm_add_legend(
    type = 'line', 
    labels = 'Outline Lambeth', 
    col = '#252525'
  ) +
  
  # set layout
  tm_layout(
    frame = FALSE,
    legend.outside = TRUE,
    legend.position = c('right', 'bottom'),
  )
```

### Network preparation
Since our focus is on schoolchildren and walking distances, we will overwrite the `oneway` variable to assume that none of the road segments are restricted to one-way traffic. This adjustment will ensure our analysis is not skewed by such restrictions and will help maintain a more accurate representation of the general connectivity of the network.

```{r} 
#| label: 08-network-one-way
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# overwrite one-way default
osm_network_edges$oneway <- 'no'
```

Now we have the network edges, we can turn this into a graph-representation that allows for the calculation of network-based accessibility statistics with our prepared point of interest data.

In any network analysis, the primary data structure is a graph composed of nodes and edges. The `dodgr` library utilises weighting profiles to assign weights based on road types, tailored to the mode of transport that each profile is designed to model. In this instance, we will use the `foot` weighting profile, as our focus is on modelling walking accessibility. To prevent errors related to the weighting profile, we will replace any `NA` values in the highway tag with the value `unclassified`.

```{r} 
#| label: 08-network-graph
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# replace missing highway tags with unclassified 
osm_network_edges <- osm_network_edges |>
  mutate(highway = if_else(is.na(highway), 'unclassified', highway))

# create network graph 
osm_network_graph <- weight_streetnet(osm_network_edges, wt_profile = 'foot')
```

Once we have constructed our graph, we can use it to calculate network distances between our points of interest. One important consideration is that not all individual components in the extracted network may be connected. This can occur, for example, if the bounding box cuts off access to the road of a [cul-de-sac](https://en.wikipedia.org/wiki/Dead_end_(street)). To ensure that our entire extracted network is connected, we will therefore extract the largest connected component of the graph. 

::: {.callout-note}
The `dodgr` package documentation explains that components are numbered in order of decreasing size, with `$component = 1` always representing the largest component. It is essential to inspect the resulting subgraph to ensure that its coverage is adequate for analysis.
:::

```{r} 
#| label: 08-connected-network-graph
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# extract the largest connected graph component
netx_connected <- osm_network_graph[osm_network_graph$component == 1, ]

# inspect number of remaining road segments
nrow(netx_connected)
```

::: {.callout-warning}
OpenStreetMap is a dynamic dataset, meaning that changes are made on a continuous basis. As a result, it is quite possible that the number of remaining road segments, as shown above, may differ slightly when you run this analysis.
:::

### Accessibility analysis
Now that we have our connected subgraph, we can use the `dodgr_distances()` function to calculate the network distances between every possible origin (i.e. school) and destination (i.e. fast food outlet). For all combinations, the function will map the point of interest locations to the nearest point on the network and return the corresponding shortest-path distances. 

::: {.callout-tip}
The `dodgr` package requires data to be projected in WGS84, so we need to reproject our point of interest data accordingly.
:::

```{r} 
#| label: 08-distance-matrix
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| message: False
#| filename: "R code"

# reproject
poi_schools <- poi_schools |>
  st_transform(4326)
poi_fastfood <- poi_fastfood |>
  st_transform(4326)

# distance matrix 
distance_matrix <- dodgr_distances(
  netx_connected,
  from=st_coordinates(poi_schools),
  to= st_coordinates(poi_fastfood), 
  shortest = FALSE, 
  pairwise = FALSE, 
  quiet=FALSE)
```

The result of this computation is a distance matrix that contains the network distances between all origins (i.e. schools) and all destinations (i.e. fast-food outlets):

```{r}
#| label: 08-distance-matrix-check
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# inspect
distance_matrix[1:5,1:5]
```
::: {.callout-tip}
The above output displays the distance (in metres) between the first five schools and the first five fast-food outlets. The row and column IDs refer to the nearest nodes on the OSM network to which the schools and fast-food outlets were mapped.
:::

Now that we have the distance matrix, we can aggregate the data and perform accessibility analysis. For example, we can count the number of fast-food outlets within 500 or 1,000 metres walking distance from each school:

```{r} 
#| label: 08-distance-matrix-aggregate
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"

# fast-food outlets within 500m
poi_schools$fastfood_500m <- rowSums(distance_matrix <= 500)

# fast-food outlets within 1000m
poi_schools$fastfood_1000m <- rowSums(distance_matrix <= 1000)
```

::: {.callout-tip}
You can further inspect the results using the `View()` function. 
:::

In the final step, we can investigate whether there is a relationship between the proximity of fast-food outlets and the relative levels of deprivation in the area. One approach is to calculate the average number of fast-food outlets within 1,000 metres of a school for each LSOA, and then compare these figures to their corresponding IMD deciles.

```{r tidy='styler'} 
#| label: 08-accessibility-join-imd
#| classes: styled-output
#| echo: True
#| eval: True
#| filename: "R code"
# read imd dataset
imd19 <- read_csv('data/England-IMD-2019.csv')

# join imd
lsoa11 <- lsoa11 |>
  left_join(imd19, by = c('lsoa11cd'='lsoa11cd'))

# join schools to their parent lsoa
poi_schools <- poi_schools |> 
  st_transform(27700) |>
  st_join(lsoa11)
```

We can use this approach to derive the average number of fast-food by IMD decile:

```{r} 
#| label: 08-accessibility-cnt-imd
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"
# average counts by imd decile
fastfood_imd <- poi_schools |>
  group_by(imd_dec) |>
  mutate(avg_cnt = mean(fastfood_1000m)) |>
  distinct(imd_dec, avg_cnt) |>
  arrange(imd_dec)

# inspect
fastfood_imd
```

There appears to be a weak relationship, with schools in more deprived areas having, on average, a higher number of fast-food outlets within a 1,000-metre walking distance. However, this trend is not consistent, as schools in the least deprived areas of Lambeth show the highest accessibility on average.

## Assignment 
Accessibility analysis involves evaluating how easily people can reach essential services, destinations, or opportunities, such as schools, healthcare facilities, or workplaces, from a given location. It considers factors like distance, travel time, and transport networks, providing valuable insights for urban planning, transport policies, and social equity. The CDRC [Access to Healthy Assets & Hazards (AHAH)](https://data.cdrc.ac.uk/dataset/access-healthy-assets-hazards-ahah) dataset, for instance, uses accessibility analysis to quantify how easy it is to reach 'unhealthy' places, such as pubs and gambling outlets, for each neighbourhood in Great Britain. 

Having run through all the steps during the tutorial, we can recreate this analysis ourselves. Using Lambeth as a case study, try to complete the following tasks:

1. Extract all `pubs` from the Point of Interest dataset.
2. For each LSOA within Lambeth, calculate the average walking distance to the nearest pub.
3. Create a map of the results.

::: {.callout-note}
Unlike before, LSOAs are now the unit of analysis. This means you will need to use the LSOA centroids as inputs for your distance matrix.
:::

::: {.callout-tip}
If you want to take a deep dive into accessibility analysis, there is a great resource that got published recently: [Introduction to urban accessibility: a practical guide in R](https://ipeagit.github.io/intro_access_book/).
:::

## Before you leave
This brings us to the end of the tutorial. You should now have a basic understanding of the concepts behind accessibility analysis, how it can be executed in R, and some of the challenges you may encounter when conducting your own research. With this being said, [you have now reached the end of this week's content](https://www.youtube.com/watch?v=fFw7q-BLxLA). Onwards and upwards! 
