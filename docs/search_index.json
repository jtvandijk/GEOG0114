[["index.html", "GEOG0114: Principles of Spatial Analysis Module overview", " GEOG0114: Principles of Spatial Analysis Justin van Dijk 2022-12-02 Module overview Week Section Topic 1 Foundational Concepts Spatial analysis for data science 2 Foundational Concepts Graphical representation of spatial data 3 Foundational Concepts Spatial autocorrelation 4 Raster data Suitability Mapping I 5 Raster data Suitability Mapping II Reading week Reading week 6 Raster data Geostatistical Modelling 7 Applied Spatial Analysis Geodemographics 8 Applied Spatial Analysis Transport network analysis 9 Spatial models Spatial models I 10 Spatial models Spatial models II Note This GitHub page contains the material for Week 07 (Geodemographics) and Week 08 (Transport network analysis) of Principles of Spatial Analysis 2022-2023. The content for 2021-2022 has been archived and can be found here: [Link] "],["geodemographics.html", "1 Geodemographics 1.1 Lecture slides 1.2 Reading list 1.3 Geodemographics 1.4 Before you leave", " 1 Geodemographics This week we will see how we can use socio-demographic and socio-economic data to characterise neighbourhoods using geodemographics. Geodemographics is the “analysis of people by where they live’ (Harris et al. 2005) and as such entails representing the individual and collective identities that are manifest in observable neighbourhood structure” (Longley 2012). We will look at geodemographics by focusing on a existing geodemographic classification known as the Internet User Classification. 1.1 Lecture slides You can download the slides of this week’s lecture here: [Link]. The recording of this week’s lecture can be found here: [Link]. 1.2 Reading list Essential readings Longley, P. A. 2012. Geodemographics and the practices of geographic information science. International Journal of Geographical Information Science 26(12): 2227-2237. [Link] Martin, D., Gale, C., Cockings, S. et al. 2018. Origin-destination geodemographics for analysis of travel to work flows. Computers, Environment and Urban Systems 67: 68-79. [Link] Singleton, A., Alexiou, A. and Savani, R. 2020. Mapping the geodemographics of digital inequality in Great Britain: An integration of machine learning into small area estimation. Computers, Environment and Urban Systems 82: 101486. [Link] Singleton, A. and Spielman, S. 2014. The past, present, and future of geodemographic research in the United States and United Kingdom. The Professional Geographer 66(4): 558-567. [Link] Suggested readings Goodman, A., Wilkinson, P., Stafford, M. et al. 2011. Characterising socio-economic inequalities in exposure to air pollution: A comparison of socio-economic markers and scales of measurement. Health &amp; Place 17(3): 767-774. [Link] 1.3 Geodemographics The CDRC Internet User Classification (IUC) is a bespoke geodemographic classification that describes how people residing in different parts of Great Britain interact with the Internet. For every Lower Super Output Area (LSOA) in England and Wales and Data Zone (DZ) (2011 Census Geographies), the IUC provides aggregate population estimates of Internet use (Singleton et al. 2020) and provides insights into the geography of the digital divide in the United Kingdom. “Digital inequality is observable where access to online resources and those opportunities that these create are non-egalitarian. As a result of variable rates of access and use of the Internet between social and spatial groups (..), this leads to digital differentiation, which entrenches difference and reciprocates digital inequality over time (Singleton et al. 2020).” 1.3.1 Internet User Classification I For the first part of this week’s practical material, we will be looking at the Internet User Classification (IUC) for Great Britain in more detail by mapping it. Our first step is to download the IUC data set: Open a web browser and go to the data portal of the CDRC. Register if you need to, or if you are already registered, make sure you are logged in. Search for Internet User Classification. Scroll down and choose the download option for the IUC 2018 (CSV). Save the iuc_gb_2018.csv file in an appropriate folder. Figure 1.1: Download the GB IUC 2018. Start by inspecting the data set in MS Excel, or any other spreadsheet software such as Apache OpenOffice Calc or Numbers. Also, have a look at the IUC 2018 User Guide that provides the pen portraits of every cluster, including plots of cluster centres and a brief summary of the methodology. Note It is always a good idea to inspect your data prior to analysis to find out how your data look like. Of course, depending on the type of data, you can choose any tool you like to do this inspection (ArcGIS, R, QGIS, Microsoft Excel, etc.). Figure 1.2: GB IUC 2018 in Excel. # load libraries library(tidyverse) library(tmap) # load data iuc &lt;- read_csv(&quot;data/index/iuc_gb_2018.csv&quot;) # inspect iuc ## # A tibble: 41,729 × 5 ## SHP_ID LSOA11_CD LSOA11_NM GRP_CD GRP_LABEL ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 E01020179 South Hams 012C 5 e-Rational Utilitarians ## 2 2 E01033289 Cornwall 007E 9 Settled Offline Communities ## 3 3 W01000189 Conwy 015F 5 e-Rational Utilitarians ## 4 4 W01001022 Bridgend 014B 7 Passive and Uncommitted Users ## 5 5 W01000532 Ceredigion 007B 9 Settled Offline Communities ## 6 6 E01018888 Cornwall 071G 9 Settled Offline Communities ## 7 7 E01018766 Cornwall 028D 9 Settled Offline Communities ## 8 8 E01019948 East Devon 010C 9 Settled Offline Communities ## 9 9 W01000539 Ceredigion 005D 5 e-Rational Utilitarians ## 10 10 E01019171 Barrow-in-Furness 005E 6 e-Mainstream ## # … with 41,719 more rows # inspect data types str(iuc) ## spc_tbl_ [41,729 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ SHP_ID : num [1:41729] 1 2 3 4 5 6 7 8 9 10 ... ## $ LSOA11_CD: chr [1:41729] &quot;E01020179&quot; &quot;E01033289&quot; &quot;W01000189&quot; &quot;W01001022&quot; ... ## $ LSOA11_NM: chr [1:41729] &quot;South Hams 012C&quot; &quot;Cornwall 007E&quot; &quot;Conwy 015F&quot; &quot;Bridgend 014B&quot; ... ## $ GRP_CD : num [1:41729] 5 9 5 7 9 9 9 9 5 6 ... ## $ GRP_LABEL: chr [1:41729] &quot;e-Rational Utilitarians&quot; &quot;Settled Offline Communities&quot; &quot;e-Rational Utilitarians&quot; &quot;Passive and Uncommitted Users&quot; ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. SHP_ID = col_double(), ## .. LSOA11_CD = col_character(), ## .. LSOA11_NM = col_character(), ## .. GRP_CD = col_double(), ## .. GRP_LABEL = col_character() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; Now the data are loaded we can move to acquiring our spatial data. As the IUC is created at the level of the Lower layer Super Output Area Census geography, we need to download its administrative borders. As the data set for the entire country is quite large, we will focus on Liverpool. Go to the UK Data Service Census support portal and select Boundary Data Selector. Set Country to England, Geography to Statistical Building Block, dates to 2011 and later, and click Find. Select English Lower Layer Super Output Areas, 2011 and click List Areas. Select Liverpool from the list and click Extract Boundary Data. Wait until loaded and download the BoundaryData.zip file. Unzip and save the file. Note You could also have downloaded the shapefile with the data already joined to the LSOA boundaries directly from the CDRC data portal, but this is the national data set and is quite large (75MB). Also, as we will be looking at Liverpool today we do not need all LSOAs in Great Britain.. Now we got the administrative boundary data, we can prepare the IUC map by joining our csv file with the IUC classification to the shapefile. # load libraries library(sf) library(tmap) # load spatial data liverpool &lt;- st_read(&quot;data/boundaries/england_lsoa_2011.shp&quot;) ## Reading layer `england_lsoa_2011&#39; from data source ## `/Users/justinvandijk/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0114/data/boundaries/england_lsoa_2011.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 298 features and 3 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 332390.2 ymin: 379748.5 xmax: 345636 ymax: 397980.1 ## Projected CRS: OSGB36 / British National Grid # inspect plot(liverpool$geometry) # join data liv_iuc &lt;- left_join(liverpool, iuc, by = c(code = &quot;LSOA11_CD&quot;)) # inspect liv_iuc ## Simple feature collection with 298 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 332390.2 ymin: 379748.5 xmax: 345636 ymax: 397980.1 ## Projected CRS: OSGB36 / British National Grid ## First 10 features: ## label name code SHP_ID LSOA11_NM ## 1 E08000012E02006934E01033755 Liverpool 062D E01033755 25097 Liverpool 062D ## 2 E08000012E02006932E01033758 Liverpool 060B E01033758 24070 Liverpool 060B ## 3 E08000012E02001356E01033759 Liverpool 010F E01033759 26845 Liverpool 010F ## 4 E08000012E02006932E01033762 Liverpool 060E E01033762 26866 Liverpool 060E ## 5 E08000012E02001396E01032505 Liverpool 050F E01032505 27848 Liverpool 050F ## 6 E08000012E02001396E01032506 Liverpool 050G E01032506 2429 Liverpool 050G ## 7 E08000012E02001396E01032507 Liverpool 050H E01032507 24242 Liverpool 050H ## 8 E08000012E02001373E01032508 Liverpool 027G E01032508 28413 Liverpool 027G ## 9 E08000012E02001373E01032509 Liverpool 027H E01032509 24339 Liverpool 027H ## 10 E08000012E02001354E01032510 Liverpool 008F E01032510 25167 Liverpool 008F ## GRP_CD GRP_LABEL geometry ## 1 2 e-Professionals POLYGON ((334276.7 391012.8... ## 2 4 Youthful Urban Fringe POLYGON ((335723 391178, 33... ## 3 7 Passive and Uncommitted Users POLYGON ((338925 394476, 33... ## 4 1 e-Cultural Creators POLYGON ((334612.4 391111.7... ## 5 7 Passive and Uncommitted Users POLYGON ((335894.7 387448.3... ## 6 6 e-Mainstream POLYGON ((336256.7 387691.8... ## 7 3 e-Veterans POLYGON ((336803.5 387432.7... ## 8 10 e-Withdrawn POLYGON ((339299 391470, 33... ## 9 7 Passive and Uncommitted Users POLYGON ((338901 391308, 33... ## 10 7 Passive and Uncommitted Users POLYGON ((338018.2 395716.4... # inspect tmap_mode(&quot;view&quot;) tm_shape(liv_iuc) + tm_fill(col = &quot;GRP_LABEL&quot;) + tm_layout(legend.outside = TRUE) Let’s use the same colours as used on CDRC mapmaker by specifying the hex colour codes for each of our groups. Note the order of the colours is important: the colour for group 1 is first, group 2 second and so on. # define palette iuc_colours &lt;- c(&quot;#dd7cdc&quot;, &quot;#ea4d78&quot;, &quot;#d2d1ab&quot;, &quot;#f36d5a&quot;, &quot;#a5cfbc&quot;, &quot;#e4a5d0&quot;, &quot;#8470ff&quot;, &quot;#79cdcd&quot;, &quot;#808fee&quot;, &quot;#ffd39b&quot;) # plot pretty tm_shape(liv_iuc) + tm_fill(col = &quot;GRP_LABEL&quot;, palette = iuc_colours) + tm_layout(legend.outside = TRUE) 1.3.2 Tutorial task I Now we have these cluster classifications, how can we link them to people? Try using the Mid-Year Population Estimates 2019 that you can download below to: calculate the total number of people associated with each cluster group for England and Wales as a whole (not just Liverpool!); and create a pretty data visualisation showing the results (no map!). File download File Type Link LSOA-level Mid-Year Population Estimates England and Wales 2019 csv Download Lower-layer Super Output Areas Great Britain 2011 shp Download 1.3.3 k-means clustering In several cases, including the 2011 residential-based area classifications and the Internet User Classification, a technique called k-means clustering is used in the creation of a geodemographic classification. K-means clustering aims to partition a set of observations into a number of clusters (k), in which each observation will be assigned to the cluster with the nearest mean. As such, a cluster refers to a collection of data points aggregated together because of certain similarities (i.e. standardised scores of your input data). In order to run a k-means clustering, you first define a target number k of clusters that you want. The k-means algorithm subsequently assigns every observation to one of the clusters by finding the solution that minimises the total within-cluster variance. For the second part of this week’s practical material, we will be replicating part of the Internet User Classification for Great Britain. For this we will be using an MSOA-level input data set containing various socio-demographic and socio-economic variables that you can download below together with the MSOA administrative boundaries. The data set contains the following variables: Variable Definition msoa11cd MSOA Code age_total, age0to4pc, age5to14pc, age16to24pc, age25to44pc, age45to64pc, age75pluspc Percentage of people in various age groups nssec_total, 1_higher_managerial, 2_lower_managerial, 3_intermediate_occupations, 4_employers_small_org, 5_lower_supervisory, 6_semi_routine, 7_routine, 8_unemployed Percentage of people in selected operational categories and sub-categories classes drawn from the National Statistics Socio-economic Classification (NS-SEC) avg_dwn_speed, avb_superfast, no_decent_bband, bband_speed_under2mbs, bband_speed_under10mbs, bband_speed_over30mbs Measures of broadband use and internet availability File download File Type Link Middle-layer Super Output Areas Great Britain 2011 shp Download MSOA-level input variables for IUC csv Download # load data iuc_input &lt;- read_csv(&quot;data/index/msoa_iuc_input.csv&quot;) # inspect head(iuc_input) ## # A tibble: 6 × 23 ## msoa11cd age_total age0to4pc age5to…¹ age16…² age25…³ age45…⁴ age75…⁵ nssec…⁶ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 E02000001 7375 0.032 0.0388 0.0961 0.407 0.273 0.0607 5816 ## 2 E02000002 6775 0.0927 0.122 0.113 0.280 0.186 0.0980 3926 ## 3 E02000003 10045 0.0829 0.102 0.118 0.306 0.225 0.0646 6483 ## 4 E02000004 6182 0.0590 0.102 0.139 0.254 0.250 0.0886 4041 ## 5 E02000005 8562 0.0930 0.119 0.119 0.299 0.214 0.0501 5368 ## 6 E02000007 8791 0.103 0.125 0.129 0.285 0.197 0.0688 5158 ## # … with 14 more variables: `1_higher_managerial` &lt;dbl&gt;, ## # `2_lower_managerial` &lt;dbl&gt;, `3_intermediate_occupations` &lt;dbl&gt;, ## # `4_employers_small_org` &lt;dbl&gt;, `5_lower_supervisory` &lt;dbl&gt;, ## # `6_semi_routine` &lt;dbl&gt;, `7_routine` &lt;dbl&gt;, `8_unemployed` &lt;dbl&gt;, ## # avg_dwn_speed &lt;dbl&gt;, avb_superfast &lt;dbl&gt;, no_decent_bband &lt;dbl&gt;, ## # bband_speed_under2mbs &lt;dbl&gt;, bband_speed_under10mbs &lt;dbl&gt;, ## # bband_speed_over30mbs &lt;dbl&gt;, and abbreviated variable names ¹​age5to14pc, … Before running our k-means clustering algorithm, we need to extract the data which we want to use; i.e. we need to remove all the columns with data that we do not want to include in the clustering process. # column names names(iuc_input) ## [1] &quot;msoa11cd&quot; &quot;age_total&quot; ## [3] &quot;age0to4pc&quot; &quot;age5to14pc&quot; ## [5] &quot;age16to24pc&quot; &quot;age25to44pc&quot; ## [7] &quot;age45to64pc&quot; &quot;age75pluspc&quot; ## [9] &quot;nssec_total&quot; &quot;1_higher_managerial&quot; ## [11] &quot;2_lower_managerial&quot; &quot;3_intermediate_occupations&quot; ## [13] &quot;4_employers_small_org&quot; &quot;5_lower_supervisory&quot; ## [15] &quot;6_semi_routine&quot; &quot;7_routine&quot; ## [17] &quot;8_unemployed&quot; &quot;avg_dwn_speed&quot; ## [19] &quot;avb_superfast&quot; &quot;no_decent_bband&quot; ## [21] &quot;bband_speed_under2mbs&quot; &quot;bband_speed_under10mbs&quot; ## [23] &quot;bband_speed_over30mbs&quot; # extract columns by index cluster_data &lt;- iuc_input[, c(3:8, 10:17, 18:20)] # inspect head(cluster_data) ## # A tibble: 6 × 17 ## age0to4pc age5to14pc age16to…¹ age25…² age45…³ age75…⁴ 1_hig…⁵ 2_low…⁶ 3_int…⁷ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.032 0.0388 0.0961 0.407 0.273 0.0607 0.385 0.339 0.0781 ## 2 0.0927 0.122 0.113 0.280 0.186 0.0980 0.0568 0.171 0.143 ## 3 0.0829 0.102 0.118 0.306 0.225 0.0646 0.0818 0.208 0.182 ## 4 0.0590 0.102 0.139 0.254 0.250 0.0886 0.0678 0.206 0.191 ## 5 0.0930 0.119 0.119 0.299 0.214 0.0501 0.0494 0.166 0.156 ## 6 0.103 0.125 0.129 0.285 0.197 0.0688 0.0564 0.163 0.136 ## # … with 8 more variables: `4_employers_small_org` &lt;dbl&gt;, ## # `5_lower_supervisory` &lt;dbl&gt;, `6_semi_routine` &lt;dbl&gt;, `7_routine` &lt;dbl&gt;, ## # `8_unemployed` &lt;dbl&gt;, avg_dwn_speed &lt;dbl&gt;, avb_superfast &lt;dbl&gt;, ## # no_decent_bband &lt;dbl&gt;, and abbreviated variable names ¹​age16to24pc, ## # ²​age25to44pc, ³​age45to64pc, ⁴​age75pluspc, ⁵​`1_higher_managerial`, ## # ⁶​`2_lower_managerial`, ⁷​`3_intermediate_occupations` We also need to rescale the data so all input data are presented on a comparable scale: the average download speed data (i.e. avg_dwn_speed) is very different to the other data that, for instance, represent the percentage of the population by different age groups. # rescale cluster_data &lt;- scale(cluster_data) # inspect head(cluster_data) ## age0to4pc age5to14pc age16to24pc age25to44pc age45to64pc age75pluspc ## [1,] -1.7579913 -2.8680309 -0.36823669 2.1768529 0.2561260 -0.6039803 ## [2,] 1.9519376 1.6403191 -0.05766949 0.1671857 -1.5639740 0.6215590 ## [3,] 1.3549320 0.5475394 0.02888699 0.5773908 -0.7424464 -0.4769094 ## [4,] -0.1050147 0.5938501 0.40759191 -0.2402277 -0.2247116 0.3136111 ## [5,] 1.9687596 1.5173858 0.05639359 0.4733916 -0.9785969 -0.9539525 ## [6,] 2.6064366 1.8434062 0.22116720 0.2379171 -1.3168781 -0.3384050 ## 1_higher_managerial 2_lower_managerial 3_intermediate_occupations ## [1,] 4.4185012 1.8391416 -2.2291104 ## [2,] -0.8510113 -0.9272602 0.1031344 ## [3,] -0.4499409 -0.3266302 1.5123844 ## [4,] -0.6741298 -0.3469851 1.8104058 ## [5,] -0.9705088 -1.0065195 0.5809449 ## [6,] -0.8571773 -1.0674213 -0.1494470 ## 4_employers_small_org 5_lower_supervisory 6_semi_routine 7_routine ## [1,] -1.02298662 -2.53130431 -2.49888739 -1.81145433 ## [2,] 0.39745656 -0.67859270 1.05051667 0.08877827 ## [3,] 0.28308676 -0.37987493 -0.05595897 -0.52802287 ## [4,] 0.13591535 0.24587683 -0.15093353 -0.07008362 ## [5,] 0.09942212 0.42532220 0.76747039 0.35318453 ## [6,] -0.18786941 0.05518013 0.56442659 0.57156979 ## 8_unemployed avg_dwn_speed avb_superfast no_decent_bband ## [1,] -0.5139854 -1.6561653 -5.2186970 -0.3797659 ## [2,] 1.1777334 0.7915882 0.5093876 -0.2031415 ## [3,] 0.7615830 0.6354463 0.5222597 -0.3797659 ## [4,] 0.2898589 0.9477301 0.5480039 -0.2472976 ## [5,] 0.8482656 0.4701196 0.2648177 0.2384195 ## [6,] 1.5510655 0.6813704 0.4965155 -0.1589854 Now our data are all on the same scale, we will start by creating an elbow plot. The elbow method is a visual aid that can help in determining the number of clusters in a data set. Remember: this is important because with a k-means clustering you need to specify the numbers of clusters a priori! The elbow method can help as it plots the total explained variation (‘Within Sum of Squares’) in your data as a function of the number of cluster. The idea is that you pick the number of clusters at the ‘elbow’ of the curve as this is the point in which the additional variation that would be explained by an additional cluster is decreasing. Effectively this means you are actually running the k-means clustering multiple times before running the actual k-means clustering algorithm. # create empty list to store the within sum of square values wss_values &lt;- list() # execute a k-means clustering for k=1, k=2, ..., k=15 for (i in 1:15) { wss_values[i] &lt;- sum(kmeans(cluster_data, centers = i, iter.max = 30)$withinss) } # inspect wss_values ## [[1]] ## [1] 144143 ## ## [[2]] ## [1] 110934.1 ## ## [[3]] ## [1] 94944.45 ## ## [[4]] ## [1] 82701.63 ## ## [[5]] ## [1] 73974.93 ## ## [[6]] ## [1] 69095.91 ## ## [[7]] ## [1] 64459.49 ## ## [[8]] ## [1] 61502.54 ## ## [[9]] ## [1] 55966.77 ## ## [[10]] ## [1] 53306.1 ## ## [[11]] ## [1] 51230.08 ## ## [[12]] ## [1] 49449.13 ## ## [[13]] ## [1] 48271.38 ## ## [[14]] ## [1] 46985.1 ## ## [[15]] ## [1] 46636.08 # vector to dataframe wss_values &lt;- as.data.frame(wss_values) # transpose wss_values &lt;- as.data.frame(t(wss_values)) # add cluster numbers wss_values$cluster &lt;- seq.int(nrow(wss_values)) names(wss_values) &lt;- c(&quot;wss&quot;, &quot;cluster&quot;) # plot using ggplot2 ggplot(data = wss_values, aes(x = cluster, y = wss)) + geom_point() + geom_path() + scale_x_continuous(breaks = seq(1, 15)) + xlab(&quot;number of clusters&quot;) + ylab(&quot;within sum of squares&quot;) Based on the elbow plot, we can now choose the number of clusters and it looks like 7 clusters would be a reasonable choice. Note The interpretation of an elbow plot can be quite subjective and often multiple options would be justified: 6, 8, and perhaps 9 clusters also do not look unreasonable. You would need to try the different options and see what output you get to determine the ‘optimal’ solution. However, at very least, the elbow plot does give you an idea of what would potentially be an adequate number of clusters. Now we have decided on the number of clusters (i.e. 7 clusters), we can run our cluster analysis. We will be running this analysis 10 times because there is an element of randomness within the clustering, and we want to make sure we get the optimal clustering output. # create empty list to store the results of the clustering clusters &lt;- list() # create empty variable to store fit fit &lt;- NA # run the k-means 10 times for (i in 1:10) { # keep track of the runs print(paste0(&quot;starting run: &quot;, i)) # run the k-means clustering algorithm to extract 7 clusters clust7 &lt;- kmeans(x = cluster_data, centers = 7, iter.max = 1e+06, nstart = 1) # get the total within sum of squares for the run and fit[i] &lt;- clust7$tot.withinss # update the results of the clustering if the total within sum of squares # for the run is lower than any of the runs that have been executed so far if (fit[i] &lt; min(fit[1:(i - 1)])) { clusters &lt;- clust7 } } ## [1] &quot;starting run: 1&quot; ## [1] &quot;starting run: 2&quot; ## [1] &quot;starting run: 3&quot; ## [1] &quot;starting run: 4&quot; ## [1] &quot;starting run: 5&quot; ## [1] &quot;starting run: 6&quot; ## [1] &quot;starting run: 7&quot; ## [1] &quot;starting run: 8&quot; ## [1] &quot;starting run: 9&quot; ## [1] &quot;starting run: 10&quot; # inspect clusters ## K-means clustering with 7 clusters of sizes 742, 2050, 186, 1814, 1106, 542, 2040 ## ## Cluster means: ## age0to4pc age5to14pc age16to24pc age25to44pc age45to64pc age75pluspc ## 1_higher_managerial 2_lower_managerial 3_intermediate_occupations ## 4_employers_small_org 5_lower_supervisory 6_semi_routine 7_routine ## 8_unemployed avg_dwn_speed avb_superfast no_decent_bband ## [ reached getOption(&quot;max.print&quot;) -- omitted 7 rows ] ## ## Clustering vector: ## [1] 1 5 7 7 5 5 5 5 5 7 7 5 5 5 5 ## [ reached getOption(&quot;max.print&quot;) -- omitted 8465 entries ] ## ## Within cluster sum of squares by cluster: ## [1] 7818.855 11694.290 3401.821 12856.939 9424.341 6277.839 11489.776 ## (between_SS / total_SS = 56.3 %) ## ## Available components: ## ## [1] &quot;cluster&quot; &quot;centers&quot; &quot;totss&quot; &quot;withinss&quot; &quot;tot.withinss&quot; ## [6] &quot;betweenss&quot; &quot;size&quot; &quot;iter&quot; &quot;ifault&quot; # inspect fit ## [1] 64456.74 62976.29 64456.74 64456.74 64459.46 64456.73 64459.49 62975.20 ## [9] 62963.86 64459.54 We now have to execute a bit of post-processing to extract some useful summary data for each cluster: the cluster size (size) and mean values for each cluster. # assign to new variable for clarity kfit &lt;- clusters # cluster sizes kfit_size &lt;- kfit$size # inspect kfit_size ## [1] 742 2050 186 1814 1106 542 2040 # mean values for each variable in each cluster kfit_mean &lt;- as_tibble(aggregate(cluster_data, by = list(kfit$cluster), FUN = mean)) names(kfit_mean)[1] &lt;- &quot;cluster&quot; # inspect kfit_mean ## # A tibble: 7 × 18 ## cluster age0to4pc age5to14pc age16to…¹ age25…² age45…³ age75…⁴ 1_hig…⁵ 2_low…⁶ ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0.327 -0.918 0.208 2.04 -1.23 -0.926 1.50 1.26 ## 2 2 -0.00623 -0.0805 -0.0519 -0.157 0.0898 0.162 -0.838 -0.851 ## 3 3 -1.52 -2.68 5.42 0.113 -2.62 -1.28 0.870 0.223 ## 4 4 -0.681 -0.0427 -0.465 -0.776 0.767 0.860 0.842 0.890 ## 5 5 1.57 1.14 0.382 0.626 -1.13 -0.955 -0.906 -1.26 ## 6 6 -0.879 -0.149 -0.523 -0.997 1.22 0.553 0.0242 0.225 ## 7 7 0.0162 0.118 -0.171 0.0203 0.201 -0.104 -0.0475 0.211 ## # … with 9 more variables: `3_intermediate_occupations` &lt;dbl&gt;, ## # `4_employers_small_org` &lt;dbl&gt;, `5_lower_supervisory` &lt;dbl&gt;, ## # `6_semi_routine` &lt;dbl&gt;, `7_routine` &lt;dbl&gt;, `8_unemployed` &lt;dbl&gt;, ## # avg_dwn_speed &lt;dbl&gt;, avb_superfast &lt;dbl&gt;, no_decent_bband &lt;dbl&gt;, and ## # abbreviated variable names ¹​age16to24pc, ²​age25to44pc, ³​age45to64pc, ## # ⁴​age75pluspc, ⁵​`1_higher_managerial`, ⁶​`2_lower_managerial` # transform shape to tidy format kfit_mean_long &lt;- pivot_longer(kfit_mean, cols = (-cluster)) # plot using ggplot2 ggplot(kfit_mean_long, aes(x = cluster, y = value, colour = name)) + geom_line() + scale_x_continuous(breaks = seq(1, 7, by = 1)) + theme_minimal() + theme(legend.title = element_blank()) Looking at the table with the mean values for each cluster and the graph, we can see, for instance, that only cluster 2 shows a clear pattern with Internet usage. Your values may be slightly different because there is this element of randomness within the clustering. The graph is a little busy, so you might want to look at the cluster groups or variables individually to get a better picture of each cluster. # read shape msoa &lt;- st_read(&quot;data/boundaries/gb_msoa11_sim.shp&quot;) ## Reading layer `gb_msoa11_sim&#39; from data source ## `/Users/justinvandijk/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0114/data/boundaries/gb_msoa11_sim.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 8480 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 5513 ymin: 5342.7 xmax: 655604.7 ymax: 1220302 ## Geodetic CRS: WGS 84 # set projection st_crs(msoa) = 27700 ## Warning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for ## that # simplify for speedier plotting msoa &lt;- st_simplify(msoa, dTolerance = 100) # join cluster_data &lt;- cbind(iuc_input, kfit$cluster) msoa &lt;- left_join(msoa, cluster_data, by = c(geo_code = &quot;msoa11cd&quot;)) # plot tmap_mode(&quot;view&quot;) tm_shape(msoa) + tm_fill(col = &quot;kfit$cluster&quot;) 1.3.4 Tutorial task II The creation of a geodemographic classification is an iterative process of trial and error that involves the addition and removal of variables as well as experimentation with different numbers of clusters. It also might be, for instances, that some clusters are very focused on one group of data (e.g. age) and it could be an idea to group some ages together. If you want to make changes to the clustering solution, you can simply re-run the analysis with a different set of variables or with a different number of clusters by updating the code. However, it would be even simpler if you could automate some of the process. Try to create a R function that: takes at least the following three arguments: a data frame that contains your input data, the number of clusters that you want, and a list of input variables; executes a k-means clustering on the input variables and the specified number of clusters; and, produces a csv file that contains the table of means of the solution. Tips The list of input variables does not have to be a list of names, but can also be a list containing the index values of the columns. Google is your friend. Your function should look something like: automate_k_means(dataframe,number_of_clusters,input_variables) Feel free to add optional variables that you need to specify if that makes it easier. Have a look at Hadley Wickhams explanation of functions in R. 1.4 Before you leave Having finished this tutorial, you should now understand the basics of a geodemographic classification. In addition, you should have written a simple function. Although you have now reached the end of this week’s content, you could try and improve your function. Consider: Including maps or graphs in the code that get automatically saved. Ensuring that the csv outcome does not get overwritten every time you run you function. Including optional arguments in your function with default values if certain values are not specified. "],["transport-network-analysis.html", "2 Transport Network Analysis 2.1 Lecture slides 2.2 Reading list 2.3 Transport Network Analysis 2.4 Before you leave", " 2 Transport Network Analysis This week we will cover a different type of data: network data. We will take a look at how we can use network data to measure accessibility using the dodgr R library. We will calculate the network distances between combinations of locations (i.e. a set of origins and a set of destinations). These distances can then, for instance, be used to calculate the number of a resource (e.g. fast-food outlets) within a certain distance of a Point of Interest (e.g. a school or population-weighted centroid). 2.1 Lecture slides You can download the slides of this week’s lecture here: [Link]. The recording of this week’s lecture can be found here: [Link]. 2.2 Reading list Essential readings Geurs, K., Van Wee, B. 2004. Accessibility evaluation of land-use and transport strategies: review and research directions. Journal of Transport Geography 12(2): 127-140. [Link] Higgins, C., Palm, M. DeJohn, A. et al. 2022. Calculating place-based transit accessibility: Methods, tools and algorithmic dependence. Journal of Transport and Land Use 15(1): 95-116. [Link] Neutens, T. Schwanen, T. and Witlox, F. 2011. The prism of everyday life: Towards a new research agenda for time geography. Transport Reviews 31(1): 25-47. [Link] Schwanen, T. and De Jong, T. 2008. Exploring the juggling of responsibilities with space-time accessibility analysis. Urban Geography 29(6): 556-580. [Link] Suggested readings Van Dijk, J., Krygsman, S. and De Jong, T. 2015. Toward spatial justice: The spatial equity effects of a toll road in Cape Town, South Africa. Journal of Transport and Land Use 8(3): 95-114. [Link] Van Dijk, J. and De Jong, T. 2017. Post-processing GPS-tracks in reconstructing travelled routes in a GIS-environment: network subset selection and attribute adjustment. Annals of GIS 23(3): 203-217. [Link] 2.3 Transport Network Analysis The term network analysis covers a wide range of analysis techniques ranging from complex network analysis to social network analysis, and from link analysis to transport network analysis. What the techniques have in common is that they are based on the concept of a network. A network or network graph is constituted by a collection of vertices that are connected to one another by edges. Note, vertices may also be called nodes or points, whilst edges may be called links or lines. Within social network analysis, you may find the terms actors (the vertices) and ties or relations (the edges) also used. Figure 2.1: Visualising networks with vertices and edges. Understanding that networks are formed through the connections of vertices and edges, we can think of many naturally and manmade occurring networks that also have a precise geography to them (i.e. their distribution can be mapped directly within geographic space), such as rivers connected with tributaries, animal tracks, electricity pylons and cables, and our road and street networks that form crucial parts of our infrastructure. The latter, in particular, have been a substantial focus of those working within spatial analysis over the last two decades, particularly with routing applications now dominating much of our day-to-day technology, from personal route-planning and ride-share apps to large-scale logistics and infrastructure applications, including the delivery operations behind all of our online shopping and even Scotland’s Trunk Road Gritters. Alongside this development of routing applications, GIS analysts, geographers and public health specialists have also identified the utility of network analysis within geographic space to calculate distance-based measurement and coverage buffers that can be used as part of accessibility studies that look to understand the provision of a specific resource (e.g. greenspaces, hospitals, and fast-food stores) to a certain area of population. 2.3.1 Accessibility in Portsmouth For this week’s practical, we will be using Portsmouth in the UK as our area of interest for our analysis. One prominent topic within the city is the issue of public health and childhood obesity. According to figures released in March 2020 by Public Health England, more than one in three school pupils are overweight or obese by the time they finish primary school within the city - higher than the national average of one in four. One potential contributor to the health crisis is the ease and availability of fast-food outlets in the city. In the following, we will measure the accessibility of fast-food outlets within specific walking distances of all school in Portsmouth starting at 400m, then 800m and finally a 1km walking distance. We will then aggregate these results to the Lower Super Output Area (LSOA) and overlay these results with some socio-economic variable. To execute this analysis, we will need to first calculate the distances between our schools and fast-food outlets. This involves calculating the shortest distance a child would walk between a school and a fast-food outlet, using roads or streets. We will use the dodgr R package to conduct this transport network analysis. Note All calculations within the dodgr library currently need to be run in WGS84/4236. This is why we will not transform the CRS of our data in this practical. 2.3.2 Acquiring network data The first dataset we need to download will help with the visualisation of our results: boundary data that contains an outline of Portsmouth. File File Type Link Major towns and cities boundaries 2015 shp Download We can now load the required libraries as well as the major towns and cities boundaries shapefile. # libraries library(tidyverse) library(sf) library(tmap) library(osmdata) library(dodgr) # load major towns and cities, filter Portsmouth portsmouth_city &lt;- st_read(&quot;data/outline/Major_Towns_and_Cities__December_2015__Boundaries.shp&quot;, stringsAsFactors = FALSE) %&gt;% filter(tcity15nm == &quot;Portsmouth&quot;) ## Reading layer `Major_Towns_and_Cities__December_2015__Boundaries&#39; from data source `/Users/justinvandijk/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0114/data/outline/Major_Towns_and_Cities__December_2015__Boundaries.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 112 features and 5 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -4.204842 ymin: 50.34101 xmax: 1.378014 ymax: 55.03117 ## Geodetic CRS: WGS 84 To create our network and Origin-Destination dataset, we will need data on schools, fast-food outlets, and a streetnetwork. Today we will be using OpenStreetMap for this. If you have never come across OpenStreetMap (OSM) before, it is a free editable map of the world. Note Note OpenStreetMap’s spatial coverage is still unequal across the world - plus, as you will find if you use the data, the accuracy and quality of the data can often be quite questionable or simply missing attribute details that we would like to have, e.g. types of roads and their speed limits, to complete specific types of spatial analysis. As a result, do not expect OSM to contain every piece of spatial data that you would want. Whilst there are various approaches to downloading data from OpenStreetMap, we will use the osmdata library to directly extract our required OpenStreetMap (OSM) data into a variable. The osmdata library grants access within R to the Overpass API that allows us to run queries on OSM data and then import the data as spatial objects. These queries are at the heart of these data downloads. We will go ahead and start with downloading and extracting our road network data. To OSM data using the osmdata library, we can use the add_osm_feature() function. To use the function, we need to provided it with either a bounding box of our area of interest (AOI) or a set of points, from which the function will create its own bounding box. You can find out more about this and details on how to construct your own queries in the data vignette. To use the library (and API), we need to know how to write and run a query, which requires identifying the key and value that we need within our query to select the correct data. Essentially every map element (whether a point, line or polygon) in OSM is tagged with different attribute data. These keys and values are used in our queries to extract only map elements of that feature type - to find out how a feature is tagged in OSM is simply a case of reading through the OSM documentation and becoming familiar with their keys and values. To download our road network dataset, we first define a variable to store our bounding box coordinates, p_bbox(). We then use this within our OSM query to extract specific types of road segments within that bounding box - the results of our query are then stored in an osmdata object. We will select all OSM features with the highway tag that are likely to be used by pedestrians (e.g. not motorways). # define our bbox coordinates for Portsmouth p_bbox &lt;- c(-1.113197, 50.775781, -1.026508, 50.859941) # pass bounding box coordinates into the OverPassQuery (opq) function only # download features that are not classified as motorway osmdata &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;highway&quot;, value = c(&quot;primary&quot;, &quot;secondary&quot;, &quot;tertiary&quot;, &quot;residential&quot;, &quot;path&quot;, &quot;footway&quot;, &quot;unclassified&quot;, &quot;living_street&quot;, &quot;pedestrian&quot;)) %&gt;% osmdata_sf() Note In some instances the OSM query will return an error, especially when several people from the same location are executing the exact same query. If this happens, you can just read through the instructions and download a prepared copy of the data that contains all required OSM Portsmouth data instead: [Link]. The osmdata object contains the bounding box of your query, a time-stamp of the query, and then the spatial data as osm_points, osm_lines, osm_multilines and osm_polgyons (which are listed with their respective fields also detailed). Some of the spatial features maybe empty, depending on what you asked your query to return. Our next step therefore is to extract our spatial data from our osmdata object to create our road network data set. This is in fact incredibly easy, using the traditional $ R approach to access these spatial features from our object. Deciding what to extract is probably the more complicated aspect of this - mainly as you need to understand how to represent your road network, and this will usually be determined by the library/functions you will be using it within. Today, we want to extract the edges of the network, i.e. the lines that represent the roads, as well as the nodes of the network, i.e. the points that represent the locations at which the roads start, end, or intersect. For our points, we will only keep the osm_id data field, just in case we need to refer to this later. For our lines, we will keep a little more information that we might want to use within our transport network analysis, including the type of road, the maximum speed, and whether the road is one-way or not. # extract the points, with their osm_id. ports_roads_nodes &lt;- osmdata$osm_points[, &quot;osm_id&quot;] # extract the lines, with their osm_id, name, type of highway, max speed and # oneway attributes ports_roads_edges &lt;- osmdata$osm_lines[, c(&quot;osm_id&quot;, &quot;name&quot;, &quot;highway&quot;, &quot;maxspeed&quot;, &quot;oneway&quot;)] To check our data set, we can quickly plot the edges of our road network using the plot() function: plot(ports_roads_edges, max.plot = 1) Because we are focusing on walking, we will overwrite the oneway variable by suggesting that none of the road segments are restricted to one-way traffic which may affect our analysis as well as the general connectivity of the network. # overwrite one-way default ports_roads_edges$oneway &lt;- &quot;no&quot; Now we have the network edges, we can turn this into a graph-representation that allows for the calculation of network-based accessibility statistics. 2.3.3 Measuring accessibility Before we can construct our full network graph for the purpose of accessibility analysis, we need to also provide our Origin and Destination points, i.e. the data points we wish to calculate the distances between. According to the dodgr documentation, these points need to be in either a vector or matrix format, containing the two coordinates for each point for the origins and for the destinations. As for our Portsmouth scenario we are interested in calculating the shortest distances between schools and fast-food outlets, we need to try and download these datasets - again we will turn to OpenStreetMap. Following a similar structure to our query above, we will use our knowledge of OpenStreetMap keys and values to extract the points of Origins (schools) and Destinations (fast-food outlets) we are interested in: # download schools from OSM schools &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;school&quot;) %&gt;% osmdata_sf() # download fast-food outlets ff_outlets &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;fast_food&quot;) %&gt;% osmdata_sf() We also need to then extract the relevant data from the osmdata object: # extract school points ports_schools &lt;- schools$osm_points[, c(&quot;osm_id&quot;, &quot;name&quot;)] # extract fast-food outlet points ports_ff &lt;- ff_outlets$osm_points[, c(&quot;osm_id&quot;, &quot;name&quot;)] We now have our road network data and our Origin-Destination (OD) points in place and we can now move to construct our network graph and run our transport network analysis. Note In this analysis, we are highly reliant on the use of OpenStreetMap to provide data for both our Origins and Destinations. Whilst in the UK OSM provides substantial coverage, its quality is not always guaranteed. As a result, to improve on our current methodology in future analysis, we should investigate into a more official school data set or at least validate the number of schools against City Council records. The same applies to our fast-food outlets. With any network analysis, the main data structure is a graph, constructed by our nodes and edges. To create a graph for use within dodgr, we pass our ports_roads_edges() into the weight_streetnet() function. The dodgr library also contains weighting profiles, that you can customise, for use within your network analysis. These weighting profiles contain weights based on the type of road, determined by the type of transportation the profile aims to model. Here we will use the weighting profile foot, as we are looking to model walking accessibility. # create network graph with the foot weighting profile graph &lt;- weight_streetnet(ports_roads_edges, wt_profile = &quot;foot&quot;) Once we have our graph, we can then use this to calculate our network distances between our OD points. One thing to keep in mind is that potentially not all individual components in the network that we extracted are connected, for instance, because the bounding box cut off the access road of a cul-de-sac. To make sure that our entire extracted network is connected, we now extract the largest connected component of the graph. You can use table(graph$component) to examine the sizes of all individual subgraphs. You will notice that most subgraphs consist of a very small number of edges. Note The dodgr package documentation explains that components are numbered in order of decreasing size, with $component = 1 always denoting the largest component. Always inspect the resulting subgraph to make sure that its coverage is adequate for analysis. # extract the largest connected graph component graph_connected &lt;- graph[graph$component == 1, ] # inspect number of remaining road segments nrow(graph_connected) ## [1] 55676 # inspect on a plot plot(dodgr_to_sf(graph_connected), max.plot = 1) Note OpenStreetMap is a living dataset, meaning that changes are made on a continuous basis; as such it may very well possible that the number of remaining road segments as shown above may be slighlty different when you run this analysis. Now we have our connected subgraph, will can use the dodgr_distances() function to calculate the network distances between every possible Origin and Destination. In the dodgr_distances() function, we first pass our graph, then our Origin points (schools), in the from argument, and then our Destination points (fast-food outlets), in the to argument. One thing to note is our addition of the st_coordinates() function as we pass our two point data sets within the from and to functions as we need to supplement our Origins and Destinations in a matrix format. For all Origins and Destinations, dodgr_distances() will map the points to the closest network points, and return corresponding shortest-path distances. # create a distance matrix between schools and fast-food stores sch_to_ff_calc &lt;- dodgr_distances(graph_connected, from = st_coordinates(ports_schools), to = st_coordinates(ports_ff), shortest = TRUE, pairwise = FALSE, quiet = FALSE) The result of this computation is a distance-matrix that contains the network distances between all Origins (i.e. schools) and all Destinations (i.e. fast-food outlets). Let’s inspect the first row of our output. Do you understand what the values mean? # inspect head(sch_to_ff_calc, n = 1) ## 1 2 3 4 5 6 7 8 ## 9 10 11 12 13 14 15 16 ## 17 18 19 20 21 22 23 24 25 ## 26 27 28 29 30 31 32 33 ## 34 35 36 37 38 39 40 41 ## 42 43 44 45 46 47 48 49 ## 50 51 52 53 54 55 56 57 ## 58 59 60 61 62 63 64 65 ## 66 67 68 69 70 71 72 73 ## 74 75 76 77 78 79 80 81 ## 82 83 84 85 86 87 88 89 ## 90 91 92 93 94 95 96 97 ## 98 99 100 101 102 103 104 105 ## 106 107 108 109 110 111 112 113 ## 114 115 116 117 118 119 120 121 ## 122 123 124 125 126 127 128 129 ## 130 131 132 133 134 135 136 137 ## 138 139 140 141 142 143 144 145 ## 146 147 148 149 150 151 152 153 ## 154 155 156 157 158 159 160 161 ## 162 163 164 165 166 167 168 169 170 ## 171 172 173 174 175 176 177 178 ## 179 180 181 182 183 184 185 186 ## 187 188 189 190 191 192 193 194 ## 195 196 197 198 199 200 201 202 ## 203 204 205 206 207 208 209 210 ## 211 212 213 214 215 216 217 218 ## 219 220 221 222 223 224 225 226 ## 227 228 229 230 231 232 233 234 ## 235 236 237 238 239 240 241 242 ## 243 244 245 246 247 248 249 250 ## 251 252 253 254 255 256 257 258 ## 259 260 261 262 263 264 265 266 ## 267 268 269 270 271 272 273 274 ## 275 276 277 278 279 280 281 282 ## 283 284 285 286 287 288 289 290 ## 291 292 293 294 295 296 297 298 ## 299 300 301 302 303 304 305 306 ## 307 308 309 310 311 312 313 ## [ reached getOption(&quot;max.print&quot;) -- omitted 1 row ] Our output shows the calculations for the first school - and the distances between the school and every fast-food outlet. Because we manually overwrote the values for all one-way streets as well as that we extracted the larges connected graph only, we currently should not have any NA values. Note The dodgr vignette notes that a distance matrix obtained from running dodgr_distances on graph_connected should generally contain no NA values, although some points may still be effectively unreachable due to one-way connections (or streets). Thus, routing on the largest connected component of a directed graph ought to be expected to yield the minimal number of NA values, which may sometimes be more than zero. Note further that spatial routing points (expressed as from and/or to arguments) will in this case be mapped to the nearest vertices of graph_connected, rather than the potentially closer nearest points of the full graph. The next step of processing all depends on what you are trying to assess - here we want to understand which schools have a higher accessibility of fast-food outlets compared to others, quantified by how many outlets are within walking distance of specific distances. We will therefore look to count how many outlets are with walking distance from each school and store this as a new column within our ports_school data frame. # fastfood outlets within 400m ports_schools$ff_within_400m &lt;- rowSums(sch_to_ff_calc &lt;= 400) # fastfood outlets within 800m ports_schools$ff_within_800m &lt;- rowSums(sch_to_ff_calc &lt;= 800) # fastfood outlets within 1000m ports_schools$ff_within_1km &lt;- rowSums(sch_to_ff_calc &lt;= 1000) We can then look at our outputs quickly again using the plot() function. # set CRS for Portsmouth schools ports_schools &lt;- st_set_crs(ports_schools, 4326) # plot results plot(ports_schools) Just from this simple plot, we can see across our distances some clear geographical patterns in accessibility of fast-food outlets for schools. We can improve this plot by making a proportional symbols map that show the different counts of fast-food outlets for each school in Portsmouth with a background of the Portsmouth City outline that you loaded at the beginning of this practical. # create proportional symbol map tmap_mode(&quot;plot&quot;) tm_shape(portsmouth_city) + tm_fill(palette = &quot;grey&quot;) + tm_shape(ports_schools) + tm_bubbles(size = &quot;ff_within_400m&quot;, col = &quot;skyblue4&quot;, style = &quot;pretty&quot;, scale = 1, border.col = &quot;white&quot;, title.size = &quot;Total Count&quot;) + tm_layout(legend.position = c(&quot;left&quot;, &quot;top&quot;), legend.text.size = 1, main.title = &quot;Fast-food outlets within 400m of a school&quot;, main.title.size = 1) + tm_compass(type = &quot;arrow&quot;, position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_credits(&quot;© OpenStreetMap contributors&quot;) The map shows that areas with greater access/exposure to fast-food outlets (denoted by the larger symbols) appear to be within the city centre and in the south, whereas those schools in the north have less exposure. However, with additional contextual information one would also be able to see that these two areas correlate quite well with the more commercial areas within Portsmouth, the high street and an area known as Gunwharf Quays. This suggests there are complexities in understanding accessibility as well as trying to apply specific policies such as banning new fast-food takeaways within a 400m range of school, particularly if these schools are in commercial areas. 2.3.4 Tutorial task Now you have calculated the number of fast-food outlets within specific distances from every school in Portsmouth, your task is to estimate the accessibility of fast-food outlets at the LSOA scale and compare this to the 2019 Index of Multiple Deprivation. Note This skills and steps required for this analysis are not just based on this week’s practical, but you will have to combine all your knowledge of coding and spatial analysis you have gained over the past weeks. One way of doing this, is by taking some of the following steps: Download and extract the 2011 LSOA boundaries of Portsmouth. Download the 2019 Index of Multiple Deprivation scores. Decide on an accessibility measure, such as: The average number of fast-food restaurants within x meters of a school within each LSOA. The average distance a fast-food restaurant is from a school within each LSOA. The (average) shortest distance a fast-food restaurant is from a school within each LSOA. The minimum shortest distance a fast-food outlet is from a school within each LSOA. Create a choropleth map of aggregate accessibility to visualise the results. Join the 2019 Index of Multiple Deprivation data to your LSOA dataset. For each IMD decile, calculate the average for your chosen aggregate measure and produce a table. Using your approach what do you think: are fast-food restaurants, on average, more accessible for students at schools that are located within LSOAs with a lower IMD decile when compared to students at schools that are located within LSOAs with a higher IMD decile? 2.4 Before you leave Having finished this tutorial on transport network analysis and, hopefully, having been able to independently conduct some further area-profiling using IMD deciles, you have now reached the end of this week’s content. However, there is some additional fundamental challenges to consider in the context of transport network and accessibility analysis: How do the different weight profiles of the dodgr package work? How would one go about creating your own weight profile? How would using a different weight profiles affect the results of your analysis? Why do we have unconnected segments in the extracted transport network? How would you inspect these unconnected segments? Would they need to be connected? If so, how would one do this? Why you think all Origins and Destinations are mapped onto the closest network points? Is this always the best option? What alternative methods could you think of and how would you implement these? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
